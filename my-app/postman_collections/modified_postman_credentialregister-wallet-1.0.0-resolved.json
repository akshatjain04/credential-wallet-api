{
  "item": [
    {
      "id": "8a88a646-6bf7-429b-badb-21c00be22966",
      "name": "accounts",
      "item": [
        null,
        null
      ],
      "event": []
    },
    null,
    null,
    {
      "id": "b7944eed-26b2-498a-8bee-4f65030e0eef",
      "name": "me",
      "item": [
        null,
        null
      ],
      "event": []
    },
    {
      "id": "9497683a-fe9e-4198-b8be-93a1e93d6f21",
      "name": "credentials",
      "item": [
        null,
        {
          "id": "5ed922c1-7bfc-45f2-9a7f-01d99f1c3050",
          "name": "{id}",
          "item": [
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    {
      "id": "a4d47fa1-5a07-4782-a1a2-b0fbd61edab2",
      "name": "authorizations",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "id": "71678d47-75e2-4f9f-9ec5-5707b292738a",
      "name": "apikeys",
      "item": [
        null,
        null,
        null
      ],
      "event": []
    },
    {
      "id": "9c2858fe-b50d-4a3e-9d83-75aaa801ef58",
      "name": "recipients",
      "item": [
        {
          "id": "566834ee-311c-445b-bbdb-a94c5914f53d",
          "name": "branches",
          "item": [
            null,
            {
              "id": "a900737f-7f44-4c96-84f7-97c02118cac8",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "d23d1804-8a1e-472c-9811-61e9d0b7a305",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1990-03-02T00:41:21.503Z\",\n  \"deregistrationDate\": \"1949-03-09\",\n  \"eoriNumber\": \"NL671372456\",\n  \"id\": \"urn:uuid:7bf0e9f2-b1e6-0c50-9b41-26e984b20e17\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"in elit exercitation\",\n    \"sunt nisi pariatur ex aliqua\"\n  ],\n  \"updatedAt\": \"1965-09-21T15:54:16.747Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2998e304-5d81-48fb-8f6c-b3a4f11c5c1f",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1990-03-02T00:41:21.503Z\",\n  \"deregistrationDate\": \"1949-03-09\",\n  \"eoriNumber\": \"NL671372456\",\n  \"id\": \"urn:uuid:7bf0e9f2-b1e6-0c50-9b41-26e984b20e17\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"in elit exercitation\",\n    \"sunt nisi pariatur ex aliqua\"\n  ],\n  \"updatedAt\": \"1965-09-21T15:54:16.747Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7d3ffe8f-c2c5-481f-864e-9a8fc0ac815e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fe007895-a768-476c-bf41-6738823efcf1",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /recipients/branches for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "3a840d21-2f0b-40a1-8aeb-6fb625f5e6d0",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "6efe25bb-95b0-421c-9ffd-e364bd2a4d98",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "511ae5bd-1a16-48ee-b23d-517db098a0b7",
          "name": "persons",
          "item": [
            null,
            null,
            {
              "id": "45e1000b-3168-48e1-87dd-2d8c9f9d9988",
              "name": "{id}",
              "item": [
                null,
                null,
                null,
                {
                  "id": "ff488ec0-9724-4349-a04e-57c34644661b",
                  "name": "registrations",
                  "item": [
                    null,
                    null
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "40a80898-40de-4062-8ec2-3ec27aae3d2a",
      "name": "registrations",
      "item": [
        null,
        {
          "id": "5bec3d69-e6f8-419f-8ec4-99e8ebaba02e",
          "name": "{id}",
          "item": [
            null,
            null,
            null
          ],
          "event": []
        }
      ],
      "event": []
    },
    null,
    null
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "cc8b3581-c4b1-49af-a1ea-c5dd468cda3b",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}
// ********RoostGPT********
/*
Test generated by RoostGPT for test correct-test-directory-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Headers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class scenario-dff35151d7-Test {

    @BeforeEach
    public void setUp() throws FileNotFoundException {
        Path payloadPath = FileSystems.getDefault().getPath("src/test/java/com/mycompany/app/RoostTest/scenario-dff35151d7-Test.csv");
        BufferedReader br = new BufferedReader(new FileReader(payloadPath.toString()));

        String line;
        try {
            while ((line = br.readLine()) != null) {
                if (line.isEmpty()) {
                    continue;
                }

                String[] payloadComponents = line.split("\\^\\|\\^");
                RestAssured.baseURI = "http://localhost:8080";
            }
        }
        catch(IOException ex) {
            ex.printStackTrace();
        }
        finally {
            try {
                br.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void createAccount() {
        given().
            header("commit-hash", "928d28d").
            body("{\"email\":\"test@test.com\"}").
        when().
            post("/accounts").
        then().
            statusCode(equalTo(201)).
            header("api-version", equalTo("1.0.0")).
            header("commit-hash", equalTo("928d28d"));

        given().
            header("Token", "change_to_valid_token").
        when().
            get("/me").
        then().
            statusCode(equalTo(200)).
            body("email", equalTo("test@test.com")).
            header("api-version", equalTo("1.0.0"));
    }
}

// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create my account \r\n' +
    '    When the client sends a POST request "/accounts" with the accounts_body payload\r\n' +
    '    Then create an account with the specified informatio\r\n' +
    '    And verify the account created using GET request for "/me"',
  title: 'Create my account'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import org.junit.Test;
import static io.restassured.RestAssured.given;

import io.restassured.http.ContentType;
import io.restassured.response.Response;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;

import org.json.JSONObject;

public class scenario_dff35151d7_Test {

    @Test
    public void testAccountCreationAndVerification() throws IOException{

        String dataFile = System.getProperty("user.dir") + System.getProperty("file.separator") +
                          "my-app\\src\\test\\java\\com\\mycompany\\app\\RoostTest\\scenario-dff35151d7-Test.csv";
        
        BufferedReader br = new BufferedReader(new FileReader(dataFile));
        String line;

        while ((line = br.readLine()) != null) {
            if(line.trim().isEmpty()){
                continue;
            }

            String[] dataArray = line.split("\\^\\|\\^");
            String method = dataArray[0];
            String url = dataArray[1];
            Map<String, Object> headers = new JSONObject(dataArray[2]).toMap();
            String body = dataArray[3];
            int responseCode = Integer.parseInt(dataArray[4]);

            switch(method){
                case "POST":
                    Response response = given().urlEncodingEnabled(true)
                        .headers(headers)
                        .body(body)
                        .post(url);
                    assert (response.statusCode() == responseCode);

                    break;

                case "GET":
                    Response response = given().urlEncodingEnabled(true)
                        .headers(headers)
                        .get(url);

                    assert (response.statusCode() == responseCode);
                    break;
            }   
        }

        br.close();
    }
}

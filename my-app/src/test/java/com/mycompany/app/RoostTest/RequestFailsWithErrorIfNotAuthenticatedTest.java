// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type  and AI Model 

ROOST_METHOD_HASH=f93f9c01c9
ROOST_METHOD_SIG_HASH=66e25557dd

 ########## Scenario ########## 

{
  feature: 'Feature: Credential Wallet API\r\n' +
    '  As a user of the Credential Wallet API\r\n' +
    '  I want to get registration details of people allowed to receive credentials \r\n' +
    '  So that I can manage my account effectively',
  background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: {
    title: 'Scenario: Request must fail with error if request not authenticated',
    steps: 'Given id of recipient as 09237482347 in path parameter\r\n' +
      'And size=43 and offset=22 in request query\r\n' +
      'When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
      'When authentication token is not sent in request\r\n' +
      'Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
      'And response body must have appropriate error schema',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class RequestFailsWithErrorIfNotAuthenticatedTest {

    private static final Path CSV_PATH = FileSystems.getDefault().getPath("src", "test", "java", "com", "mycompany", "app", "RoostTest", "RequestFailsWithErrorIfNotAuthenticatedTest.csv");
    private final Map<String, String> testData = new HashMap<>();

    @BeforeEach
    public void setup() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(CSV_PATH.toFile()));
        String line = reader.readLine(); // Skip headers
        while ((line = reader.readLine()) != null) {
            if (line.trim().isEmpty()) continue;
            String[] parts = line.split("\\^\\|\\^");
            testData.put("METHOD", parts[0]);
            testData.put("URL", parts[1]);
            testData.put("REQ_HEADERS", parts[2]);
            testData.put("REQ_BODY", parts[3]);
            testData.put("RESPONSE_CODE", parts[4]);
            testData.put("RESPONSE_BODY", parts[5]);
        }
        reader.close();
    }

    @Test
    public void testRequestFailsWithErrorIfNotAuthenticated() {
        // Given id of recipient as 09237482347 in path parameter
        // And size=43 and offset=22 in request query
        // When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations"
        // When authentication token is not sent in request
        // Then for unauthenticated request having status code 401, Verify that headers have api-version
        // And response body must have appropriate error schema

        RestAssured.baseURI = "http://localhost:8080";

        Response response = given()
                .pathParam("id", "09237482347")
                .queryParam("size", "43")
                .queryParam("offset", "22")
                .header(new Header("api-version", testData.get("REQ_HEADERS")))
                .when()
                .get(testData.get("URL"))
                .then()
                .assertThat()
                .statusCode(Integer.parseInt(testData.get("RESPONSE_CODE")))
                .body("error", is(notNullValue()))
                .body("description", is(notNullValue()))
                .header("api-version", is(notNullValue()))
                .extract()
                .response();

        // Additional nested assertions can be performed here if needed
    }
}

// ********RoostGPT********
/*
Test generated by RoostGPT for test new-credential-wallet-rest-assured-integration-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=a991089179
ROOST_METHOD_SIG_HASH=5a667c5d20

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get Registration Details Of Recipient Person\r\n' +
    '    Given id of recipient as 27364922937 in path parameter\r\n' +
    '    And size=13 and offset=42 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is sent in request\r\n' +
    '    Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
    '    And response body must have element registrations and total.',
  title: 'Get Registration Details Of Recipient Person'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.path.json.JsonPath;
import org.testng.annotations.BeforeEach;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import org.json.JSONObject;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetRegistrationDetailsOfRecipientPersonTest {

	Map<String, String> headers = new HashMap<>();

	JSONObject requestBody;

	String url;

	int responseCode;

	JSONObject responseBody;

	String method;

	@BeforeEach
	public void setup() {
		String line;
		try (BufferedReader br = new BufferedReader(new FileReader(
				"src/test/java/com/mycompany/app/RoostTest/GetRegistrationDetailsOfRecipientPersonTest.csv"))) {
			br.readLine(); // skipping headers
			while ((line = br.readLine()) != null) {
				if (line.trim().isEmpty())
					continue; // skip empty lines
				String[] payload = line.split("\\^\\|\\^");
				method = payload[0];
				url = payload[1];
				headers = new JSONObject(payload[2]).toMap()
					.entrySet()
					.stream()
					.collect(Collectors.toMap(Map.Entry::getKey, e -> (String) e.getValue()));
				requestBody = new JSONObject(payload[3]);
				responseCode = Integer.parseInt(payload[4]);
				responseBody = new JSONObject(payload[5]);
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void testGetRegistrationDetailsOfRecipientPerson() {
		// Send GET request and validate response
		Response response = RestAssured.given()
			.headers(headers)
			.when()
			.get(url)
			.then()
			.assertThat()
			.statusCode(responseCode)
			.and()
			.body("total", equalTo(responseBody.getInt("total")))
			.body("registrations", hasSize(responseBody.getJSONArray("registrations").length()))
			.extract()
			.response();

		// Validate each registration
		JsonPath jsonPathEvaluator = response.jsonPath();
		for (int i = 0; i < responseBody.getJSONArray("registrations").length(); i++) {
			JSONObject registration = responseBody.getJSONArray("registrations").getJSONObject(i);
			jsonPathEvaluator.setRoot("registrations[" + i + "]");
			jsonPathEvaluator.get("id").equals(registration.getString("id"));
			jsonPathEvaluator.get("reference").equals(registration.getString("reference"));
			jsonPathEvaluator.get("startDate").equals(registration.getString("startDate"));
			jsonPathEvaluator.get("endDate").equals(registration.getString("endDate"));
			jsonPathEvaluator.get("status").equals(registration.getString("status"));
			jsonPathEvaluator.get("credentialUrl").equals(registration.getString("credentialUrl"));
			jsonPathEvaluator.get("suspendedUntil").equals(registration.getString("suspendedUntil"));
			jsonPathEvaluator.get("issuedAt").equals(registration.getString("issuedAt"));
			jsonPathEvaluator.get("createdAt").equals(registration.getString("createdAt"));
			jsonPathEvaluator.get("updatedAt").equals(registration.getString("updatedAt"));
		}
	}

}

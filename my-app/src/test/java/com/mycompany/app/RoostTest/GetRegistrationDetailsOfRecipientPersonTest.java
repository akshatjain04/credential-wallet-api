// ********RoostGPT********
/*
Test generated by RoostGPT for test new-credential-wallet-rest-assured-integration-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=a991089179
ROOST_METHOD_SIG_HASH=5a667c5d20

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get Registration Details Of Recipient Person\r\n' +
    '    Given id of recipient as 27364922937 in path parameter\r\n' +
    '    And size=13 and offset=42 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is sent in request\r\n' +
    '    Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
    '    And response body must have element registrations and total.',
  title: 'Get Registration Details Of Recipient Person'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class GetRegistrationDetailsOfRecipientPersonTest {

	private String baseUrl = "http://localhost:8080";

	@BeforeEach
	public void setUp() {
		RestAssured.baseURI = baseUrl;
	}

	@Test
	public void testGetRegistrationDetailsOfRecipientPerson() {
		Path path = FileSystems.getDefault()
			.getPath("src", "test", "java", "com", "mycompany", "app", "RoostTest",
					"GetRegistrationDetailsOfRecipientPersonTest.csv");
		try (BufferedReader br = new BufferedReader(new FileReader(path.toFile()))) {
			String line;
			while ((line = br.readLine()) != null) {
				if (line.isEmpty())
					continue;
				String[] payload = line.split("\\^\\|\\^");
				if (payload[0].equals("METHOD"))
					continue;

				String method = payload[0];
				String url = payload[1].replace(baseUrl, "");
				JSONObject reqHeaders = new JSONObject(payload[2]);
				JSONObject reqBody = new JSONObject(payload[3]);
				int responseCode = Integer.parseInt(payload[4]);
				JSONObject responseBody = new JSONObject(payload[5]);

				Headers headers = new Headers();
				for (String key : reqHeaders.keySet()) {
					headers = headers.and(new Header(key, reqHeaders.getString(key)));
				}

				Response response = RestAssured.given().headers(headers).body(reqBody.toString()).when().get(url);
				assertEquals(responseCode, response.getStatusCode());

				JSONObject jsonResponse = new JSONObject(response.getBody().asString());
				assertEquals(responseBody.getInt("total"), jsonResponse.getInt("total"));

				JSONArray registrations = jsonResponse.getJSONArray("registrations");
				assertNotNull(registrations);
				for (int i = 0; i < registrations.length(); i++) {
					JSONObject registration = registrations.getJSONObject(i);
					assertNotNull(registration.get("id"));
					assertNotNull(registration.get("startDate"));
					assertNotNull(registration.get("status"));
					assertNotNull(registration.get("credentialUrl"));
					assertNotNull(registration.get("createdAt"));
					assertNotNull(registration.get("updatedAt"));
				}
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}

}

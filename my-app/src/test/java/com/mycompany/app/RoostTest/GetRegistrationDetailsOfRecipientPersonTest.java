// ********RoostGPT********
/*
Test generated by RoostGPT for test new-credential-wallet-rest-assured-integration-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=d4875ba7c9
ROOST_METHOD_SIG_HASH=deac2363dc

 ########## Scenario ########## 

{
  feature: 'Feature: Credential Wallet API\r\n' +
    '  As a user of the Credential Wallet API\r\n' +
    '  I want to get registration details of people allowed to receive credentials \r\n' +
    '  So that I can manage my account effectively',
  background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: {
    title: 'Scenario: Get Registration Details Of Recipient Person',
    steps: 'Given id of recipient as 27364922937 in path parameter\r\n' +
      'And size=13 and offset=42 in request query\r\n' +
      'When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
      'When authentication token is sent in request\r\n' +
      'Then for successful request having status code 200, Verify that headers have api-version, page-size and  page-offset\r\n' +
      'And response body must have element registrations and total.',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static io.restassured.RestAssured.given;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;

public class GetRegistrationDetailsOfRecipientPersonTest {

    @BeforeTest
    public void setUp() {
        RestAssured.baseURI = "http://localhost:8080";
    }

    @DataProvider(name = "payloadData")
    public Object[][] createData() throws IOException {
        String filePath = "src" + System.getProperty("file.separator") + "test" + System.getProperty("file.separator") +
                "java" + System.getProperty("file.separator") + "com" + System.getProperty("file.separator") + 
                "mycompany" + System.getProperty("file.separator") + "app" + System.getProperty("file.separator") + 
                "RoostTest" + System.getProperty("file.separator") + "GetRegistrationDetailsOfRecipientPersonTest.csv";
        BufferedReader br = new BufferedReader(new FileReader(filePath));

        List<String[]> data = new ArrayList<>();
        String line;
        int counter = 0;
        while ((line = br.readLine()) != null) {
            if (counter > 0) { // Skip first line (headers)
                data.add(line.split("\\^\\|\\^"));
            }
            counter++;
        }

        br.close();

        Object[][] array = new Object[data.size()][];
        for (int i = 0; i < data.size(); i++) {
            array[i] = data.get(i);
        }

        return array;
    }

    @Test(dataProvider = "payloadData")
    public void testGetRegistrationDetailsOfRecipientPerson(String method, String url, String reqHeaders, String reqBody, String responseCode, String responseBody) {
        Headers headers = Headers.headers(new Header("Token", "authentication token"),
                new Header("api-version", "1.0.0"), new Header("page-size", "13"),
                new Header("page-offset", "42"));

        Response response = given().headers(headers).when().get(url).then().extract().response();

        // Assert status code
        assertEquals(response.getStatusCode(), Integer.parseInt(responseCode));

        // Assert headers
        assertEquals(response.getHeader("api-version"), "1.0.0");
        assertNotNull(response.getHeader("page-size"));
        assertNotNull(response.getHeader("page-offset"));

        // Assert response body
        assertEquals(response.getBody().asString(), responseBody);
    }
}

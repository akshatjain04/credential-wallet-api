// ********RoostGPT********
/*
Test generated by RoostGPT for test new-credential-wallet-rest-assured-integration-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=12ece3c33e
ROOST_METHOD_SIG_HASH=acd4a6d263

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Request must fail with error if request not authenticated\r\n' +
    '    Given id of recipient as 09237482347 in path parameter\r\n' +
    '    And size=43 and offset=22 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is not sent in request\r\n' +
    '    Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
    '    And response body must have appropriate error schema',
  title: 'Request must fail with error if request not authenticated'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

public class RequestFailIfNotAuthenticatedTest {

	String fileSeparator = FileSystems.getDefault().getSeparator();

	@BeforeEach
	public void setup() throws IOException {
		String filePath = "src" + fileSeparator + "test" + fileSeparator + "java" + fileSeparator + "com"
				+ fileSeparator + "mycompany" + fileSeparator + "app" + fileSeparator + "RoostTest" + fileSeparator
				+ "RequestFailIfNotAuthenticatedTest.csv";
		BufferedReader reader = new BufferedReader(new FileReader(filePath));
		String line = reader.readLine();

		while ((line = reader.readLine()) != null && !line.isEmpty()) {
			String[] data = line.split("\\^\\|\\^");
			String method = data[0];
			String url = data[1];
			String req_headers = data[2];
			String req_body = data[3];
			int response_code = Integer.parseInt(data[4]);
			String response_body = data[5];
		}
		reader.close();
	}

	@Test
	@DisplayName("Request must fail with error if request not authenticated")
	public void testRequestFailIfNotAuthenticated() {
		given().contentType(ContentType.JSON)
			.pathParam("id", "09237482347")
			.queryParam("size", 43)
			.queryParam("offset", 22)
			.when()
			.get("http://localhost:8080/recipients/persons/{id}/registrations")
			.then()
			.statusCode(401)
			.header("api-version", "1.0.0")
			.body("error", notNullValue());
	}

}

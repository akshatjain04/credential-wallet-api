// ********RoostGPT********
/*
Test generated by RoostGPT for test new-credential-wallet-rest-assured-integration-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=f93f9c01c9
ROOST_METHOD_SIG_HASH=66e25557dd

 ########## Scenario ########## 

{
  feature: 'Feature: Credential Wallet API\r\n' +
    '  As a user of the Credential Wallet API\r\n' +
    '  I want to get registration details of people allowed to receive credentials \r\n' +
    '  So that I can manage my account effectively',
  background: 'Background:\r\n    Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: {
    title: 'Scenario: Request must fail with error if request not authenticated',
    steps: 'Given id of recipient as 09237482347 in path parameter\r\n' +
      'And size=43 and offset=22 in request query\r\n' +
      'When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
      'When authentication token is not sent in request\r\n' +
      'Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
      'And response body must have appropriate error schema',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class RequestFailIfNotAuthenticatedTest {

    private String url;
    private String method;
    private Map<String, String> headers = new HashMap<>();
    private String reqBody;
    private int responseCode;
    private String responseBody;

    @BeforeEach
    public void setUp() throws IOException {
        String path = "src" + File.separator + "test" + File.separator + "java" + File.separator
                + "com" + File.separator + "mycompany" + File.separator + "app" + File.separator
                + "RoostTest" + File.separator + "RequestFailIfNotAuthenticatedTest.csv";
        BufferedReader br = new BufferedReader(new FileReader(path));
        String line;
        int rowIndex = 0;
        while ((line = br.readLine()) != null) {
            if (rowIndex > 0) { // Skip the first row (headers)
                String[] data = line.split("\\^\\|\\^");
                method = data[0];
                url = data[1];
                headers = new HashMap<>();
                headers.put("Token", data[2]);
                reqBody = data[3];
                responseCode = Integer.parseInt(data[4]);
                responseBody = data[5];
            }
            rowIndex++;
        }
        br.close();
    }

    @Test
    public void testRequestFailIfNotAuthenticated() {
        RestAssured.baseURI = url;

        Response response = given()
                .headers(headers)
                .body(reqBody)
                .contentType(ContentType.JSON)
                .when()
                .request(method);

        // Assert status code
        assertEquals(responseCode, response.getStatusCode());

        // Assert response body
        JsonPath jsonPathEvaluator = response.jsonPath();
        assertEquals(responseBody, jsonPathEvaluator.prettify());

        // Assert headers
        assertEquals(headers.get("api-version"), response.getHeader("api-version"));
    }
}

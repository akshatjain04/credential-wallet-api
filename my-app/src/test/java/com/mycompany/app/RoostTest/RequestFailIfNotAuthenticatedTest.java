// ********RoostGPT********
/*
Test generated by RoostGPT for test new-credential-wallet-rest-assured-integration-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=12ece3c33e
ROOST_METHOD_SIG_HASH=acd4a6d263

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Request must fail with error if request not authenticated\r\n' +
    '    Given id of recipient as 09237482347 in path parameter\r\n' +
    '    And size=43 and offset=22 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is not sent in request\r\n' +
    '    Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
    '    And response body must have appropriate error schema',
  title: 'Request must fail with error if request not authenticated'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class RequestFailIfNotAuthenticatedTest {

	private static final String filePath = "src/test/java/com/mycompany/app/RoostTest/RequestFailIfNotAuthenticatedTest.csv";

	private String baseUrl;

	private String endpoint;

	@BeforeEach
	public void setup() throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(filePath));
		String line;
		while ((line = reader.readLine()) != null) {
			if (line.isEmpty()) {
				continue;
			}
			String[] payload = line.split("\\^\\|\\^");
			if (payload[0].equalsIgnoreCase("METHOD") && payload[1].equalsIgnoreCase("URL")) {
				baseUrl = "http://localhost:8080";
				endpoint = payload[1].replace("{id}", "09237482347");
			}
		}
		reader.close();
	}

	@Test
	public void testRequestFailIfNotAuthenticated() throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(filePath));
		String line;
		while ((line = reader.readLine()) != null) {
			if (line.isEmpty()) {
				continue;
			}
			String[] payload = line.split("\\^\\|\\^");
			Map<String, String> headersMap = new HashMap<>();
			Map<String, String> requestBodyMap = new HashMap<>();
			if (!payload[2].equals("{}")) {
				headersMap = parseStringToMap(payload[2]);
			}
			if (!payload[3].equals("{}")) {
				requestBodyMap = parseStringToMap(payload[3]);
			}

			Headers headers = new Headers(headersMap.entrySet()
				.stream()
				.map(e -> new Header(e.getKey(), e.getValue()))
				.toArray(Header[]::new));

			Response response = RestAssured.given()
				.headers(headers)
				.queryParams(requestBodyMap)
				.when()
				.get(baseUrl + endpoint)
				.then()
				.extract()
				.response();

			assertEquals(Integer.parseInt(payload[4]), response.getStatusCode());

			Map<String, String> responseMap = parseStringToMap(payload[5]);
			responseMap.forEach((key, value) -> assertEquals(value, response.path(key)));
		}
		reader.close();
	}

	private Map<String, String> parseStringToMap(String str) {
		Map<String, String> map = new HashMap<>();
		str = str.replace("{", "").replace("}", "");
		String[] pairs = str.split(",");
		for (String pair : pairs) {
			String[] keyValue = pair.split(":");
			map.put(keyValue[0].trim(), keyValue[1].trim());
		}
		return map;
	}

}

// ********RoostGPT********
/*
Test generated by RoostGPT for test new-credential-wallet-rest-assured-integration-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=12ece3c33e
ROOST_METHOD_SIG_HASH=acd4a6d263

 ########## Scenario ##########

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Request must fail with error if request not authenticated\r\n' +
    '    Given id of recipient as 09237482347 in path parameter\r\n' +
    '    And size=43 and offset=22 in request query\r\n' +
    '    When the client sends a GET request to endpoint "/recipients/persons/{id}/registrations" \r\n' +
    '    When authentication token is not sent in request\r\n' +
    '    Then for unauthenticated request having status code 401, Verify that headers have api-version\r\n' +
    '    And response body must have appropriate error schema',
  title: 'Request must fail with error if request not authenticated'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class RequestFailIfNotAuthenticatedTest {

	private static final String DELIMITER = "\\^\\|\\^";

	private static final String DATA_FILE = "src/test/java/com/mycompany/app/RoostTest/RequestFailIfNotAuthenticatedTest.csv";

	private String method;

	private String url;

	private String reqHeaders;

	private String reqBody;

	private int responseCode;

	private String responseBody;

	@BeforeEach
	public void setUp() {
		try (BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE))) {
			String line;
			reader.readLine(); // Skip header line
			while ((line = reader.readLine()) != null) {
				if (line.trim().isEmpty())
					continue;
				String[] data = line.split(DELIMITER);
				method = data[0];
				url = data[1];
				reqHeaders = data[2];
				reqBody = data[3];
				responseCode = Integer.parseInt(data[4]);
				responseBody = data[5];
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void testRequestFailIfNotAuthenticated() {
		// Given
		RestAssured.baseURI = url;
		RequestSpecification request = RestAssured.given();
		request.header("Token", null);

		// When
		Response response = request.get();

		// Then
		assertEquals(responseCode, response.getStatusCode(), "Expected response code to be " + responseCode);
		assertEquals("1.0.0", response.getHeader("api-version"), "Expected api-version to be 1.0.0");
	}

}

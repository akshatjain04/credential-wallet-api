// ********RoostGPT********
/*
Test generated by RoostGPT for test correct-test-directory-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Delete authorization\r\n' +
    '    Given authorization ID\r\n' +
    '    When the client sends a DELETE request to "/authorizations/ID"\r\n' +
    '    Then the response status code should be 200 for a successful delete\r\n' +
    '    And the authorizations should not appear in GET request for "/authorizations"',
  title: 'Delete authorization'
}

*/

// ********RoostGPT********
package com.mycompany.app.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.ValidatableResponse;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import java.io.*;
import java.util.HashMap;
import java.nio.file.FileSystems;
import java.nio.file.Path;

import static org.hamcrest.Matchers.is;

public class scenario_87771cdd6d_Test {
    private static Path path = FileSystems.getDefault().getPath("src/test/java/com/mycompany/app/RoostTest/scenario-87771cdd6d-Test.csv");

    @BeforeTest
    public static void setup() throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(path.toFile()));
        String line = br.readLine(); //read the header
        while ((line = br.readLine()) != null && !line.isEmpty()) {
            String[] values = line.split("\\^\\|\\^");
            if (values.length == 6) {
                // extracting payload data
                String method = values[0];
                String URL = values[1];
                HashMap headers = new HashMap<>((HashMap)org.json.simple.JSONValue.parse(values[2]));
                HashMap body = new HashMap<>((HashMap)org.json.simple.JSONValue.parse(values[3]));
                int response_code = Integer.parseInt(values[4]);
                HashMap response_body = new HashMap<>((HashMap)org.json.simple.JSONValue.parse(values[5]));

                //setting up base URL
                RestAssured.baseURI = "http://localhost:8080";
                RestAssured.basePath = URL;
            }
        }
    }

    @Test
    public void testDeleteAuthorization() {
        ValidatableResponse validatableResponse = RestAssured
                .given()
                .header("Token", "apiKey")
                .when()
                .delete("/authorizations/{id}")
                .then()
                .assertThat()
                .statusCode(200)
                .and()
                .header("api-version", "1.0.0");

        // Asserting that the authorization does not exist after the delete
        RestAssured
                .given()
                .header("Token", "apiKey")
                .when()
                .get("/authorizations")
                .then()
                .assertThat()
                .statusCode(200)
                .and()
                .body("total", is(0));
    }
}
